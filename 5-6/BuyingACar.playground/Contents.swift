import UIKit

// Buying a car. Swift

/*
 Начнем с примера:

 У человека довольно старая машина стоимостью 2000 долларов.
 Он увидел подержанную машину стоимостью 8000 долларов.
 Он хочет сохранить свою старую машину,
 пока не купит подержанную.

 Он думает, что может экономить 1000 долларов каждый месяц,
 но цены на его старую машину и на новую уменьшаются на 1,5
 процента в месяц. Кроме того, этот процент потерь
 увеличивается на 0,5 процента в конце каждых двух месяцев.
 
 Нашему человеку сложно произвести все эти расчеты.
 
 Сколько месяцев ему понадобится, чтобы накопить достаточно денег, чтобы купить машину,
 которую он хочет, и сколько денег у него останется?
 
 Продажи, покупки и сбережения обычно совершаются в конце месяца.
 Расчеты обрабатываются в конце каждого рассматриваемого месяца,
 но если случайно с самого начала стоимость старого автомобиля больше стоимости нового или равна,
 то экономить не нужно, не нужно ждать, поэтому он можно в начале месяца купить новую машину:
 */

/*
 testing(2000, 8000, 1000, 1.5, (6, 766))
 testing(12000, 8000, 1000, 1.5 , (0, 4000))
 testing(8000, 12000, 500, 1.0, (8, 597))
 testing(18000, 32000, 1500, 1.25, (8, 332))
 testing(7500, 32000, 300, 1.55, (25, 122))
 */

func nbMonths(_ startPriceOld: Int,
              _ startPriceNew: Int,
              _ savingPerMonth: Int,
              _ percentLossByMonth: Double) -> (Int, Int) {
    
    if startPriceOld >= startPriceNew { return (0, (startPriceOld - startPriceNew))}
    
    return (0,0)
}
